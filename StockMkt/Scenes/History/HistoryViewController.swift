//
//  HistoryViewController.swift
//
//  Created by Marcio Garcia on 07/06/20.
//  Copyright (c) 2020 Oxl Tech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HistoryDisplayLogic: class {
    func displayHistory(_ history: HistoryModel)
    func displayError(title: String, message: String)
}

class HistoryViewController: UIViewController, HistoryDisplayLogic {
    
    // MARK: Layout properties
    
    var contentView: HistoryContentViewProtocol?
    
    // MARK: Properties
    
    var interactor: HistoryBusinessLogic?

    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    }
  
    required init?(coder aDecoder: NSCoder){
        super.init(coder: aDecoder)
    }

    convenience init(interactor: HistoryBusinessLogic?) {
        self.init(nibName: nil, bundle: nil)
        self.interactor = interactor
        contentView = HistoryContentView(viewController: self)
        setupViewConfiguration()
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "History"
        view.backgroundColor = .white
        navigationItem.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)
        fetchHistory()
    }
  
    // MARK: Fetch data
  
    func fetchHistory() {
        interactor?.fetchHistory()
    }

    // MARK: HistoryDisplayLogic
    
    func displayHistory(_ history: HistoryModel) {
        DispatchQueue.main.async {
            self.title = history.first?.ticket ?? "History"
        }
        contentView?.updateHistory(history: history)
    }

    func displayError(title: String, message: String) {
        DispatchQueue.main.async {
            let alert = UIAlertController.standardMessage(title: title,
                                                          message: message,
                                                          completion: nil)
            self.present(alert, animated: true, completion: nil)
        }
    }
}

extension HistoryViewController: ViewCodingProtocol {
    func buildViewHierarchy() {
        guard let contentView = contentView else { return }
        view.addSubview(contentView)
    }
    
    func setupConstraints() {
        contentView?.constraint {[
            $0.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            $0.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),
            $0.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),
            $0.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),
        ]}
    }
}
